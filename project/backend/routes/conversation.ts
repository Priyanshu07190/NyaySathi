import express from 'express';
import { OpenRouterService } from '../services/openrouter.js';

const router = express.Router();
const openRouter = new OpenRouterService();

router.post('/send', async (req, res) => {
  try {
    const { message, language = 'hi', session_id = 'default' } = req.body;
    
    // Validate input
    if (!message || message.trim().length === 0) {
      return res.status(400).json({ 
        error: 'Message is required',
        message: language === 'hi' ? '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§' : 'Please enter your message.'
      });
    }
    
    console.log(`üì© Conversation request - Language: ${language}, Message: ${message.substring(0, 50)}...`);
    
    // Default fallback responses
    let aiResponse = language === 'hi' 
      ? "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§î‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
      : "Thank you for your legal query. I understand you need assistance. Please provide more details.";
    
    let suggestions = language === 'hi' 
      ? [
          "‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç",
          "‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§¨‡§®‡§µ‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?", 
          "‡§è‡§®‡§ú‡•Ä‡§ì ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç"
        ]
      : [
          "Tell me more about your situation",
          "Do you want to generate a document?", 
          "Connect with an NGO"
        ];
    
    try {
      // Try to get AI response
      console.log('ü§ñ Attempting to get AI response...');
      const aiResult = await openRouter.conversationResponse(message, language);
      
      if (aiResult && aiResult.message) {
        aiResponse = aiResult.message;
        suggestions = aiResult.suggestions || suggestions;
        console.log('‚úÖ AI response received successfully');
      } else {
        console.log('‚ö†Ô∏è AI response was empty, using fallback');
      }
    } catch (aiError) {
      console.log('‚ùå AI service error:', aiError instanceof Error ? aiError.message : 'Unknown error');
      console.log('Using intelligent fallback response...');
    }
    
    const response = {
      session_id,
      message: aiResponse,
      suggestions,
      language,
      timestamp: new Date().toISOString()
    };
    
    console.log('üì§ Sending response:', response.message.substring(0, 100) + '...');
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Conversation route error:', error);
    res.status(500).json({ 
      error: 'Failed to process conversation',
      message: req.body?.language === 'hi' 
        ? '‡§Æ‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§'
        : 'Sorry, something went wrong. Please try again.'
    });
  }
});

export default router;